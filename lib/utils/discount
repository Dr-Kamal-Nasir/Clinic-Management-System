// // 

// // app/pharmacy/issue/page.tsx
// 'use client';
// import { useState, useEffect } from 'react';
// import useSWR from 'swr';
// import { PlusCircle, MinusCircle, Trash2, CheckCircle, Search } from 'lucide-react';
// import { Button } from '@/components/ui/button';
// import { Input } from '@/components/ui/input';
// import { Label } from '@/components/ui/label';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
// import { toast } from 'sonner';
// import { useAuthStore } from '@/store/useAuthStore';
// // import { sendAdminSMSNotification } from '@/lib/services/smsService';

// interface MedicineItem {
//   medicine: string;
//   name: string;
//   batchNumber: string;
//   quantity: number;
//   unitPrice: number;
//   discount: number;
//   total: number;
//   priceLocked: boolean;
// }

// const fetcher = (url: string) => fetch(url).then(res => res.json());

// export default function IssueMedicinePage() {
//   const { user } = useAuthStore();
//   const [patientName, setPatientName] = useState('');
//   const [patientPhone, setPatientPhone] = useState('');
//   const [paymentMethod, setPaymentMethod] = useState('cash');
//   const [items, setItems] = useState<MedicineItem[]>([]);
//   const [selectedMedicine, setSelectedMedicine] = useState('');
//   const [invoiceNumber, setInvoiceNumber] = useState(`INV-${Date.now()}`);
//   const [searchQuery, setSearchQuery] = useState('');
  
//   const { data: medicines, isLoading } = useSWR('/api/pharmacy/stock', fetcher);
//   const medicinesData = medicines?.data || [];

//   // Filter medicines by name
//   const filteredMedicines = medicinesData.filter((medicine: any) => 
//     medicine.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
//     medicine.batchNumber.toLowerCase().includes(searchQuery.toLowerCase())
//   );

//   const addItem = () => {
//     if (!selectedMedicine) return;
    
//     const medicine = medicinesData.find((m: any) => m._id === selectedMedicine);
//     if (!medicine) return;
    
//     // Check if already added
//     const existingItem = items.find(item => item.medicine === selectedMedicine);
//     if (existingItem) {
//       setItems(items.map(item => 
//         item.medicine === selectedMedicine 
//           ? { ...item, quantity: item.quantity + 1 } 
//           : item
//       ));
//     } else {
//       setItems([
//         ...items,
//         {
//           medicine: selectedMedicine,
//           name: medicine.name,
//           batchNumber: medicine.batchNumber,
//           quantity: 1,
//           unitPrice: medicine.sellingPrice,
//           discount: 0,
//           total: medicine.sellingPrice,
//           priceLocked: true
//         }
//       ]);
//     }
    
//     setSelectedMedicine('');
//     setSearchQuery('');
//   };

//   const updateItem = (medicineId: string, field: string, value: any) => {
//     setItems(items.map(item => {
//       if (item.medicine === medicineId) {
//         const updatedItem = { ...item, [field]: value };
        
//         // Recalculate total if quantity or discount changes
//         if (field === 'quantity' || field === 'discount') {
//           const discountedPrice = updatedItem.unitPrice * (1 - updatedItem.discount / 100);
//           updatedItem.total = updatedItem.quantity * discountedPrice;
//         }
        
//         // Send notification if discount is applied
//         // if (field === 'discount' && value > 20) {
//         //   sendAdminSMSNotification(
//         //     `High discount applied (${value}%) on ${item.name} for patient ${patientName}`,
//         //     process.env.ADMIN_PHONE || '+1234567890'
//         //   );
//         //   toast('Notification Sent', {
//         //     description: `Admin notified about ${value}% discount`,
//         //   });
//         // }
        
//         return updatedItem;
//       }
//       return item;
//     }));
//   };

//   const removeItem = (medicineId: string) => {
//     setItems(items.filter(item => item.medicine !== medicineId));
//   };

//   const calculateTotal = () => {
//     return items.reduce((sum, item) => sum + item.total, 0);
//   };

//   const handleSubmit = async () => {
//     if (!patientName || !patientPhone || items.length === 0) {
//       toast('Validation Error',{
//         description: 'Please fill all required fields',
//       });
//       return;
//     }

//     try {
//       const response = await fetch('/api/pharmacy/prescriptions', {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' },
//         body: JSON.stringify({
//           patientName,
//           patientPhone,
//           invoiceNumber,
//           items: items.map(item => ({
//             medicine: item.medicine,
//             quantity: item.quantity,
//             discount: item.discount,
//             unitPrice: item.unitPrice
//           })),
//           totalAmount: calculateTotal(),
//           amountPaid: calculateTotal(), // Assuming full payment
//           paymentMethod
//         })
//       });

//       if (response.ok) {
//         toast('Success',{
//           description: 'Prescription issued successfully',
//         });
        
//         // Reset form
//         setPatientName('');
//         setPatientPhone('');
//         setItems([]);
//         setInvoiceNumber(`INV-${Date.now()}`);
//       } else {
//         const errorData = await response.json();
//         throw new Error(errorData.error || 'Failed to issue prescription');
//       }
//     } catch (error: any) {
//       toast('Error',{
//         description: error.message || 'Failed to issue prescription',
//       });
//     }
//   };

//   return (
//     <div className="container mx-auto px-4 py-8">
//       <Card>
//         <CardHeader>
//           <CardTitle className="flex justify-between items-center">
//             <span>Issue Medicine</span>
//             <div className="flex items-center gap-2">
//               <Label>Invoice #:</Label>
//               <Input 
//                 value={invoiceNumber}
//                 onChange={(e) => setInvoiceNumber(e.target.value)}
//                 className="w-40"
//               />
//             </div>
//           </CardTitle>
//         </CardHeader>
//         <CardContent>
//           <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
//             <div>
//               <Label>Patient Name *</Label>
//               <Input 
//                 value={patientName}
//                 onChange={(e) => setPatientName(e.target.value)}
//                 placeholder="Enter patient name"
//               />
//             </div>
//             <div>
//               <Label>Patient Phone *</Label>
//               <Input 
//                 value={patientPhone}
//                 onChange={(e) => setPatientPhone(e.target.value)}
//                 placeholder="Enter patient phone"
//               />
//             </div>
//           </div>

//           <div className="mb-6">
//             <Label>Add Medicine</Label>
//             <div className="flex gap-2 mb-2">
//               <div className="relative flex-1">
//                 <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
//                 <Input
//                   placeholder="Search medicines..."
//                   value={searchQuery}
//                   onChange={(e) => setSearchQuery(e.target.value)}
//                   className="pl-10"
//                 />
//               </div>
//               <Button onClick={addItem} disabled={!selectedMedicine}>
//                 <PlusCircle className="mr-2 h-4 w-4" /> Add
//               </Button>
//             </div>
            
//             <Select value={selectedMedicine} onValueChange={setSelectedMedicine}>
//               <SelectTrigger className="w-full">
//                 <SelectValue placeholder="Select medicine" />
//               </SelectTrigger>
//               <SelectContent className="max-h-60 overflow-y-auto">
//                 {filteredMedicines
//                   .filter((m: any) => m.quantity > 0)
//                   .map((medicine: any) => (
//                     <SelectItem key={medicine._id} value={medicine._id}>
//                       <div className="flex justify-between">
//                         <span>{medicine.name}</span>
//                         <span className="ml-4 text-muted-foreground">
//                           ${medicine.sellingPrice.toFixed(2)}
//                         </span>
//                       </div>
//                     </SelectItem>
//                   ))}
//               </SelectContent>
//             </Select>
//           </div>

//           {items.length > 0 && (
//             <div className="border rounded-lg mb-6">
//               <div className="grid grid-cols-12 gap-2 p-2 bg-gray-100 font-medium">
//                 <div className="col-span-5">Medicine</div>
//                 <div className="col-span-2">Price</div>
//                 <div className="col-span-1">Qty</div>
//                 <div className="col-span-2">Discount %</div>
//                 <div className="col-span-1">Total</div>
//                 <div className="col-span-1"></div>
//               </div>
              
//               {items.map((item) => (
//                 <div key={item.medicine} className="grid grid-cols-12 gap-2 p-2 border-t">
//                   <div className="col-span-5">
//                     <div>{item.name}</div>
//                     <div className="text-sm text-muted-foreground">Batch: {item.batchNumber}</div>
//                   </div>
//                   <div className="col-span-2">
//                     <Input 
//                       type="number"
//                       value={item.unitPrice}
//                       onChange={(e) => updateItem(item.medicine, 'unitPrice', parseFloat(e.target.value))}
//                       min="0"
//                       step="0.01"
//                       disabled={item.priceLocked}
//                       className={item.priceLocked ? 'bg-gray-100' : ''}
//                     />
//                   </div>
//                   <div className="col-span-1 flex items-center gap-1">
//                     <Button 
//                       variant="outline" 
//                       size="icon"
//                       onClick={() => updateItem(item.medicine, 'quantity', Math.max(1, item.quantity - 1))}
//                     >
//                       <MinusCircle className="h-4 w-4" />
//                     </Button>
//                     <Input 
//                       className="w-12 text-center"
//                       value={item.quantity}
//                       onChange={(e) => updateItem(item.medicine, 'quantity', parseInt(e.target.value) || 1)}
//                       min="1"
//                     />
//                     <Button 
//                       variant="outline" 
//                       size="icon"
//                       onClick={() => updateItem(item.medicine, 'quantity', item.quantity + 1)}
//                     >
//                       <PlusCircle className="h-4 w-4" />
//                     </Button>
//                   </div>
//                   <div className="col-span-2">
//                     <Input 
//                       type="number"
//                       value={item.discount}
//                       onChange={(e) => {
//                         const discount = parseFloat(e.target.value);
//                         updateItem(item.medicine, 'discount', discount);
//                       }}
//                       min="0"
//                       max="100"
//                       step="1"
//                     />
//                   </div>
//                   <div className="col-span-1 flex items-center justify-end font-medium">
//                     ${item.total.toFixed(2)}
//                   </div>
//                   <div className="col-span-1 flex justify-center">
//                     <Button 
//                       variant="destructive" 
//                       size="icon"
//                       onClick={() => removeItem(item.medicine)}
//                     >
//                       <Trash2 className="h-4 w-4" />
//                     </Button>
//                   </div>
//                 </div>
//               ))}
              
//               <div className="p-2 border-t font-bold text-right">
//                 Total: ${calculateTotal().toFixed(2)}
//               </div>
//             </div>
//           )}

//           <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
//             <div>
//               <Label>Payment Method</Label>
//               <Select value={paymentMethod} onValueChange={setPaymentMethod}>
//                 <SelectTrigger>
//                   <SelectValue placeholder="Select payment method" />
//                 </SelectTrigger>
//                 <SelectContent>
//                   <SelectItem value="cash">Cash</SelectItem>
//                   <SelectItem value="card">Card</SelectItem>
//                   <SelectItem value="insurance">Insurance</SelectItem>
//                 </SelectContent>
//               </Select>
//             </div>
//             <div className="flex items-end">
//               <Button 
//                 className="w-full"
//                 size="lg"
//                 onClick={handleSubmit}
//                 disabled={items.length === 0}
//               >
//                 <CheckCircle className="mr-2 h-5 w-5" />
//                 Issue Prescription
//               </Button>
//             </div>
//           </div>
//         </CardContent>
//       </Card>
//     </div>
//   );
// }